generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  password      String
  role          String         @default("parent")
  createdAt     DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  parentProfile ParentProfile?
  students      Student[]
}

model ParentProfile {
  id         Int      @id
  email      String
  name       String
  createdAt  DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [id], references: [id])
}

model Student {
  id             Int               @id @default(autoincrement())
  parentId       Int
  firstName      String
  lastName       String
  birthday       DateTime
  createdAt      DateTime          @default(now())
  updated_at     DateTime          @updatedAt
  avatarUrl      String?
  points         Int               @default(0)
  courseProgress Json              @default("{\"CAREER\": 0, \"SOCIAL\": 0, \"COOKING\": 0, \"MINDSET\": 0, \"HOME_MAINTENANCE\": 0}")
  ageGroup       AgeGroup          @default(GROUP_7_9)
  parent         User              @relation(fields: [parentId], references: [id])
  progress       StudentProgress[]
}

model StudentProgress {
  id                Int       @id @default(autoincrement())
  studentId         Int
  lessonId          Int
  completedSections String[]
  completedAt       DateTime?
  createdAt         DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  lesson            Lesson    @relation(fields: [lessonId], references: [id])
  student           Student   @relation(fields: [studentId], references: [id])

  @@unique([studentId, lessonId])
  @@index([studentId])
  @@index([lessonId])
}

model Course {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  category    String
  points      Int      @default(0)
  createdAt   DateTime @default(now())
  updated_at  DateTime @updatedAt
  modules     Module[]
}

model Module {
  id          Int      @id @default(autoincrement())
  title       String
  courseId    Int
  orderNumber Int
  createdAt   DateTime @default(now())
  updated_at  DateTime @updatedAt
  lessons     Lesson[]
  course      Course   @relation(fields: [courseId], references: [id])
}

model Lesson {
  id          Int               @id @default(autoincrement())
  title       String
  description String?
  orderNumber Int
  videoUrl    String?
  points      Int               @default(0)
  createdAt   DateTime          @default(now())
  updated_at  DateTime          @updatedAt
  moduleId    Int
  voiceIntro  String?
  module      Module            @relation(fields: [moduleId], references: [id])
  sections    LessonSection[]
  progress    StudentProgress[]
}

model LessonSection {
  id          Int         @id @default(autoincrement())
  lessonId    Int
  content     Json
  orderNumber Int
  createdAt   DateTime    @default(now())
  updated_at  DateTime    @updatedAt
  type        SectionType
  lesson      Lesson      @relation(fields: [lessonId], references: [id])
}

enum AgeGroup {
  GROUP_5_6
  GROUP_7_9
  GROUP_10_12
}

enum SectionType {
  TEXT
  IMAGE
  VIDEO
  INTERACTIVE
  VOICE
}
