generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SectionType {
  text
  image
  quiz
  question
  video
}

enum AgeGroup {
  GROUP_5_6
  GROUP_7_9
  GROUP_10_12
}
model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  password      String
  role          String         @default("parent")
  createdAt     DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  parentProfile ParentProfile?
  students      Student[]
}

model ParentProfile {
  id         Int      @id
  email      String
  firstName       String
  lastName       String
  createdAt  DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [id], references: [id])
}

model Student {
  id             Int               @id @default(autoincrement())
  parentId       Int
  firstName      String
  lastName       String
  birthday       DateTime
  createdAt      DateTime          @default(now())
  updated_at      DateTime          @updatedAt
  avatarUrl      String?
  points         Int               @default(0)
  streakDays     Int               @default(0)
  totalTimeSpent Int               @default(0) // in minutes
  ageGroup       AgeGroup          @default(GROUP_7_9)
  courseProgress Json              @default("{}")
  parent         User              @relation(fields: [parentId], references: [id])
  progress       StudentProgress[]
  dailyGoals     StudentDailyGoal[]
}

model StudentProgress {
  id                Int       @id @default(autoincrement())
  studentId         Int
  lessonId          Int
  completedSections String[] // âœ… Good for storing completed section IDs
  completedAt       DateTime?
  createdAt         DateTime  @default(now())
  updated_at        DateTime  @updatedAt

  lesson            Lesson    @relation(fields: [lessonId], references: [id])
  student           Student   @relation(fields: [studentId], references: [id])

  @@unique([studentId, lessonId])
  @@index([studentId])
  @@index([lessonId])
}

model StudentDailyGoal {
  id              Int      @id @default(autoincrement())
  studentId       Int
  date            DateTime
  targetMinutes   Int
  completedMinutes Int
  createdAt       DateTime @default(now())

  student         Student  @relation(fields: [studentId], references: [id])

  @@unique([studentId, date]) // One goal per day
}


model Course {
  id              Int       @id @default(autoincrement())
  title           String
  description     String?
  content         String?         //  New optional column added
  category        String?
  points          Int       @default(0)
  imageUrl        String?
  createdAt       DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  modules         Module[]

  // Virtual fields like totalLessons and completedLessons will be computed in the API
}

model Module {
  id         Int      @id @default(autoincrement())
  courseId   Int
  title      String?
  lessons    Lesson[]
  course     Course   @relation(fields: [courseId], references: [id])
}

model Lesson {
  id              Int               @id @default(autoincrement())
  title           String
  description     String?
  orderNumber     Int
  videoUrl        String?
  points          Int               @default(0)
  duration        Int?
  completed       Boolean?
  voiceIntro      String?
  nextLessonId    Int?
  moduleId        Int
  createdAt       DateTime          @default(now())
  updated_at      DateTime          @updatedAt

  module          Module            @relation(fields: [moduleId], references: [id])

  
  nextLesson      Lesson?           @relation("NextLesson", fields: [nextLessonId], references: [id])
  previousLessons Lesson[]          @relation("NextLesson")

  sections        LessonSection[]
  progress        StudentProgress[]

  @@index([nextLessonId])
}


model LessonSection {
  id                Int             @id @default(autoincrement())
  lessonId          Int
  title             String
  audioUrl          String?
  completed         Boolean?
  durationInSeconds Int?
  orderNumber       Int
  type              SectionType
  createdAt         DateTime        @default(now())
  updated_at         DateTime        @updatedAt

  lesson            Lesson          @relation(fields: [lessonId], references: [id])
  contents          SectionContent[]
}

model SectionContent {
  id         Int             @id @default(autoincrement()) // or use cuid() if string preferred
  sectionId  Int
  type       SectionType
  timing     Int
  data       Json            // Expected to include fields like text, url, alt, question, options, correctAnswerIndex
  section    LessonSection   @relation(fields: [sectionId], references: [id])
}
