// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
enum AgeGroup {
  GROUP_5_6
  GROUP_7_9
  GROUP_10_12
}

model User {
  id             Int             @id @default(autoincrement())
  email          String          @unique
  password       String
  role           String          @default("parent")
  createdAt      DateTime        @default(now())
  updated_at     DateTime        @updatedAt
  parentProfile  ParentProfile?
  students       Student[]
}

model Course {
  id          Int        @id @default(autoincrement())
  title       String
  description String?
  category    String
  points      Int        @default(0)
  createdAt   DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  lessons     Lesson[]
}

model Lesson {
  id          Int        @id @default(autoincrement())
  course      Course     @relation(fields: [courseId], references: [id])
  courseId    Int
  title       String
  description String?
  orderNumber Int
  videoUrl    String?
  points      Int        @default(0)
  createdAt   DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  sections    LessonSection[]
  progress    StudentProgress[]
}

model LessonSection {
  id          Int        @id @default(autoincrement())
  lesson      Lesson     @relation(fields: [lessonId], references: [id])
  lessonId    Int
  type        String
  content     Json
  orderNumber Int
  createdAt   DateTime   @default(now())
  updated_at  DateTime   @updatedAt
}

model ParentProfile {
  id        Int    @id
  email     String
  name      String
  createdAt DateTime @default(now())
  updated_at DateTime @updatedAt
  user      User   @relation(fields: [id], references: [id])
}

model Student {
  id             Int              @id @default(autoincrement())
  parent         User             @relation(fields: [parentId], references: [id])
  parentId       Int
  firstName      String
  lastName       String
  birthday       DateTime
  createdAt      DateTime         @default(now())
  updated_at     DateTime         @updatedAt
  avatarUrl      String?
  points         Int              @default(0)
  courseProgress Json             @default("{\"CAREER\": 0, \"SOCIAL\": 0, \"COOKING\": 0, \"MINDSET\": 0, \"HOME_MAINTENANCE\": 0}")
  ageGroup       AgeGroup         @default(GROUP_7_9)
  progress       StudentProgress[]
}

model StudentProgress {
  id                Int        @id @default(autoincrement())
  student           Student    @relation(fields: [studentId], references: [id])
  studentId         Int
  lesson            Lesson     @relation(fields: [lessonId], references: [id])
  lessonId          Int
  completedSections String[]
  completedAt       DateTime?
  createdAt         DateTime   @default(now())
  updated_at        DateTime   @updatedAt
  @@unique([studentId, lessonId])
}
